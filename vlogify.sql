-- phpMyAdmin SQL Dump
-- version 5.2.1
-- https://www.phpmyadmin.net/
--
-- Host: 127.0.0.1
-- Generation Time: Oct 10, 2024 at 03:57 PM
-- Server version: 10.4.32-MariaDB
-- PHP Version: 8.2.12

SET SQL_MODE = "NO_AUTO_VALUE_ON_ZERO";
START TRANSACTION;
SET time_zone = "+00:00";


/*!40101 SET @OLD_CHARACTER_SET_CLIENT=@@CHARACTER_SET_CLIENT */;
/*!40101 SET @OLD_CHARACTER_SET_RESULTS=@@CHARACTER_SET_RESULTS */;
/*!40101 SET @OLD_COLLATION_CONNECTION=@@COLLATION_CONNECTION */;
/*!40101 SET NAMES utf8mb4 */;

--
-- Database: `vlogify`
--

-- --------------------------------------------------------

--
-- Table structure for table `categories`
--

CREATE TABLE `categories` (
  `categories_id` int(11) NOT NULL,
  `categories_name` varchar(255) NOT NULL,
  `created_at` timestamp NOT NULL DEFAULT current_timestamp()
) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_general_ci;

--
-- Dumping data for table `categories`
--

INSERT INTO `categories` (`categories_id`, `categories_name`, `created_at`) VALUES
(1, 'Web Development', '2024-10-07 14:43:29'),
(2, 'Artificial Intelligent', '2024-10-07 14:43:29');

-- --------------------------------------------------------

--
-- Table structure for table `posts`
--

CREATE TABLE `posts` (
  `posts_id` int(11) NOT NULL,
  `title` varchar(255) NOT NULL,
  `image` varchar(255) NOT NULL,
  `description` longtext NOT NULL,
  `categories_id` int(11) NOT NULL,
  `users_id` int(11) NOT NULL,
  `created_at` timestamp NOT NULL DEFAULT current_timestamp()
) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_general_ci;

--
-- Dumping data for table `posts`
--

INSERT INTO `posts` (`posts_id`, `title`, `image`, `description`, `categories_id`, `users_id`, `created_at`) VALUES
(1, 'How I Became a Freelance Web Developer', 'https://kitchen.co/blog/wp-content/uploads/2021/03/how-to-become-a-freelance-web-developer-2.jpg', 'Introduction\r\nBecoming a freelance web developer has been one of the most rewarding decisions of my career. It’s given me the freedom to work on projects I’m passionate about, control over my schedule, and the ability to continuously develop my skills. But, the road to becoming a successful freelancer wasn’t always smooth. In this post, I’ll take you through my journey, from my first steps in web development to landing my first client, and everything I’ve learned along the way.\r\n\r\nGetting Started: My First Steps in Web Development\r\nMy journey began when I was still pursuing my degree in Computer Science. Like many people, I was fascinated by the way websites functioned. The idea that you could build something accessible to millions with just a laptop and an internet connection hooked me immediately. During my early years, I spent countless hours learning the basics—HTML, CSS, and JavaScript—through online tutorials, courses, and personal projects.\r\n\r\nAt first, the learning curve was steep. There were moments of frustration when my code wouldn’t work as expected, but each time I overcame an obstacle, my passion for web development grew. I quickly realized that the best way to truly learn was to build real projects, so I created my own portfolio site and started working on small personal projects, like blogs and simple landing pages.\r\n\r\nBuilding My Portfolio\r\nWhile I was developing my coding skills, I knew that having a strong portfolio would be crucial to attract clients. My first portfolio wasn’t fancy, but it showcased the projects I’d worked on and demonstrated my ability to create functional websites. Over time, I refined my portfolio as my skills improved and I gained more experience.\r\n\r\nOne of the most important pieces of advice I can give to aspiring freelancers is to work on side projects early on. This could be anything from building websites for friends or family to contributing to open-source projects. Not only do these projects help you learn, but they also become valuable portfolio items to show potential clients.\r\n\r\nTransitioning from Full-Time to Freelancing\r\nAfter graduating with a degree in Computer Science, I took on a full-time position as a web developer. While the job provided me with stable income and valuable experience, I felt a strong desire to have more control over the projects I worked on and the flexibility to manage my own time. That’s when I started to explore freelancing.\r\n\r\nThe transition wasn’t immediate. I kept my full-time job while gradually building my freelance business on the side. This allowed me to gain experience and develop a client base without the financial pressure of going all-in. I started with small projects I could handle in my spare time, such as building websites for local businesses or doing front-end work for startup companies.\r\n\r\nWorking on freelance gigs after office hours was challenging, but it gave me a taste of the freedom and satisfaction I was seeking. After a year of juggling both my job and freelancing, I decided it was time to take the leap and become a full-time freelance web developer.\r\n\r\nFinding My First Clients\r\nOne of the biggest challenges for any freelancer is finding that first client. It was no different for me. I initially relied on my personal network, reaching out to friends and acquaintances to see if they needed any web development work. To my surprise, my first few clients came from word of mouth.\r\n\r\nI also signed up for freelance platforms like Upwork and Fiverr, where I could bid on projects that aligned with my skills. Although these platforms can be competitive, they were a great way for me to build my reputation and gather testimonials early on. Over time, as I completed more projects, my portfolio grew, and I started receiving referrals from satisfied clients.\r\n\r\nOvercoming Challenges\r\nFreelancing isn’t all smooth sailing. One of the hardest lessons I learned early on was the importance of clear communication with clients. On one of my first projects, I didn’t outline the scope of the work properly, which led to misunderstandings and extra hours of unpaid work. From that experience, I realized how crucial it is to set clear expectations and create detailed contracts.\r\n\r\nAnother challenge I faced was managing my time effectively. Without the structure of a 9-to-5 job, it’s easy to let work spill over into evenings and weekends. To avoid burnout, I started setting regular working hours, using time management tools like Trello and Toggl to track my progress, and ensuring that I made time for breaks and hobbies.\r\n\r\nThe Freedom of Freelancing\r\nOne of the greatest rewards of freelancing has been the ability to choose my own clients and projects. This freedom has allowed me to work on projects that genuinely interest me, whether it’s building a music streaming website or creating a custom CMS for a local business. I’m able to pursue my passion for coding in a way that aligns with my personal and professional goals.\r\n\r\nAnother major benefit has been the flexibility. As a freelancer, I can work from anywhere—whether it’s from home, a coffee shop, or while traveling. This flexibility has improved my work-life balance and allowed me to spend more time on hobbies and with loved ones.\r\n\r\nBuilding Long-Term Relationships with Clients\r\nOne key to long-term success as a freelance web developer is building strong relationships with clients. I’ve found that many of my best opportunities have come from repeat clients who were happy with my work. Delivering high-quality results, meeting deadlines, and maintaining good communication have been essential in fostering these relationships.\r\n\r\nBy providing consistent value, I’ve been able to turn short-term projects into long-term partnerships. These repeat clients often refer me to others in their network, which has allowed my freelance business to grow organically over time.\r\n\r\nContinuous Learning and Growth\r\nThe tech industry is always evolving, and as a freelance web developer, it’s important to stay up-to-date with the latest trends and technologies. I dedicate time each week to learning new tools and improving my skills, whether it’s through online courses, tutorials, or attending webinars.\r\n\r\nOne thing that has helped me stand out as a freelancer is my willingness to adapt and learn new skills, such as mobile app development or working with modern JavaScript frameworks like React and Vue. By constantly improving, I’ve been able to offer more value to my clients and stay competitive in the market.\r\n\r\nConclusion: Is Freelancing Right for You?\r\nFreelancing as a web developer can be an incredibly fulfilling career path. It offers the freedom to work on projects you love, the flexibility to set your own schedule, and the opportunity to continuously grow and learn. However, it also requires discipline, perseverance, and strong communication skills.\r\n\r\nIf you’re considering freelancing, my advice is to start small, build a strong portfolio, and never stop learning. While the journey may have its challenges, the rewards are well worth the effort. Freelancing has allowed me to pursue my passion for web development on my own terms, and I wouldn’t trade it for anything else.', 1, 1, '2024-10-07 17:37:38'),
(2, 'My Top 5 JavaScript Frameworks for 2024', 'https://introduct.tech/wp-content/uploads/2024/04/JavaScript-Frameworks.jpg', 'Choosing the right JavaScript framework can significantly impact the success of your web development projects. With new updates and innovations every year, 2024 is no different. Below are my top 5 JavaScript frameworks, each offering unique features and advantages, suited for different types of applications. Let’s explore these frameworks and see how they can elevate your coding experience in 2024.\r\n\r\n1. React\r\nReact continues to lead the pack in 2024. Developed by Facebook, it remains one of the most popular and widely used JavaScript libraries. React’s component-based architecture makes it easy to build reusable UI components, and its virtual DOM enhances performance for large-scale applications. Its vibrant ecosystem includes powerful tools like React Router and Redux for managing complex state and routing. React is great for developers who want flexibility and scalability, whether you’re working on a personal project or building enterprise-level applications. Additionally, the vast React community ensures that resources and support are always readily available.\r\n\r\n2. Vue.js\r\nVue.js is known for its simplicity and ease of use, and it continues to grow in popularity as one of the best frameworks for building intuitive user interfaces. Vue offers a gentle learning curve, making it ideal for beginners or those transitioning from other frameworks. Its reactive two-way data binding and virtual DOM make it efficient for both small and large applications. Vue also integrates well with existing projects and libraries, making it versatile. In 2024, Vue’s latest updates enhance its ecosystem, including tools like Vue Router and Vuex, which streamline development for dynamic, single-page applications.\r\n\r\n3. Svelte\r\nSvelte has gained significant traction over the past few years due to its unique approach to building web applications. Unlike other frameworks that manipulate the DOM using JavaScript, Svelte shifts this work to compile time, producing highly efficient, clean, and minimal code. This leads to faster load times and better performance for end-users. Svelte’s simplicity and no-boilerplate approach make it an excellent choice for developers who want to build lightweight, high-performing applications. In 2024, Svelte is still one of the go-to frameworks for developers looking to minimize overhead while maintaining flexibility.\r\n\r\n4. Next.js\r\nNext.js, a framework built on top of React, has become the top choice for developers focused on performance, SEO, and scalability. With its server-side rendering (SSR) and static site generation (SSG) features, Next.js allows developers to create high-performance websites that load fast and rank well in search engines. It also supports API routes and full-stack capabilities, making it a powerful tool for building production-grade web applications. As we move into 2024, Next.js remains highly relevant for developers looking to optimize their projects for modern web standards, particularly in the areas of SEO and user experience.\r\n\r\n5. Nuxt.js\r\nNuxt.js is to Vue what Next.js is to React. It’s a framework that adds server-side rendering, static site generation, and many other powerful features to Vue.js applications. Nuxt simplifies the development process by providing conventions and out-of-the-box solutions for complex tasks like routing and data fetching. With a modular architecture and a robust plugin system, Nuxt.js is perfect for creating both static websites and dynamic applications. In 2024, Nuxt continues to be a strong choice for Vue developers who want to streamline the development process and focus on building high-quality, performant applications.\r\n\r\nEach of these frameworks has its strengths, and selecting the right one depends on your project’s specific needs. Whether it’s React’s scalability, Vue’s simplicity, Svelte’s efficiency, Next.js’ performance focus, or Nuxt.js’ power for Vue lovers, these tools will continue shaping web development in 2024.', 1, 2, '2024-10-07 17:37:38'),
(3, 'HTML & CSS Tricks to Level Up Your Web Design', 'https://media.geeksforgeeks.org/wp-content/uploads/20231227105640/HTML-CSS-tricks.png', 'Web design is an ever-evolving field, and staying on top of the latest trends and techniques can help you create more engaging, functional, and aesthetically pleasing websites. While HTML and CSS form the foundation of every website, there are some powerful tricks that can take your designs from basic to professional. In this post, I’ll share a few of my favorite HTML and CSS tips that can help you level up your web design skills.\r\n\r\n1. CSS Flexbox & Grid Layouts\r\nOne of the biggest challenges in web design is creating layouts that are both responsive and easy to maintain. Flexbox and Grid have revolutionized the way we approach layout design. Flexbox is great for one-dimensional layouts (such as navigation bars or aligning items within a container), allowing you to align elements along a row or column with minimal CSS. You can use properties like justify-content, align-items, and flex-wrap to handle spacing and alignment without worrying about floats or positioning hacks.\r\n\r\nCSS Grid, on the other hand, excels at two-dimensional layouts. It allows you to define both rows and columns, giving you more control over complex layouts. With Grid, you can create responsive designs without the need for complex media queries. By mastering Flexbox and Grid, you can create dynamic, responsive layouts that adjust beautifully on different devices.\r\n\r\n2. Custom Fonts & Icons\r\nTypography plays a critical role in web design. Using custom fonts can make your site stand out and reinforce your brand identity. Services like Google Fonts and Adobe Fonts provide a wide variety of free and premium fonts that you can easily integrate into your designs. To enhance readability and visual appeal, experiment with different font pairings and use web-safe fallback fonts to ensure compatibility across different browsers.\r\n\r\nIcons are another essential part of modern web design. Instead of relying on images, consider using icon fonts like Font Awesome or Material Icons. These icon libraries allow you to add scalable vector icons to your site, which are lightweight and customizable. By applying CSS, you can easily change the size, color, and position of icons to fit your design. Integrating custom fonts and icons adds a polished touch to your websites while improving overall user experience.\r\n\r\n3. CSS Animations & Transitions\r\nAnimations and transitions can add a dynamic, interactive element to your website. CSS offers a range of built-in tools for creating animations without needing JavaScript. For example, you can use the transition property to animate changes in properties such as color, opacity, or size when a user interacts with an element (such as hovering over a button).\r\n\r\nAdditionally, CSS @keyframes allows you to define more complex animations. Whether you want to create subtle hover effects or animate entire sections of a page, adding well-designed animations can make your website more engaging and visually appealing. Just remember to use animations sparingly—overloading a site with unnecessary motion can hurt performance and distract users from important content.\r\n\r\n4. HTML5 Semantic Elements\r\nHTML5 introduced several semantic elements that help make your markup more meaningful. Using elements like <header>, <footer>, <section>, <article>, and <nav> not only makes your code cleaner and more readable but also improves accessibility and SEO. Screen readers and search engines can better interpret your content when you use semantic tags, which can lead to improved user experience and search rankings.\r\n\r\nFor example, wrapping your navigation links in a <nav> tag signals to search engines and assistive technologies that these links are part of the site’s navigation, while using <article> to wrap blog content or standalone sections ensures that each piece of content is properly distinguished. By embracing HTML5’s semantic structure, you’ll create websites that are both better-optimized and more accessible.\r\n\r\n5. Responsive Design Techniques\r\nEnsuring your website looks good on all screen sizes is a key aspect of modern web design. Responsive design techniques like media queries allow you to apply different styles based on the size of the user’s device. But media queries aren’t the only tool at your disposal. Using flexible units like em, rem, %, and vw (viewport width) instead of fixed pixels makes your design more adaptable across a variety of screen sizes.\r\n\r\nFor example, using rem for font sizing ensures that your typography scales proportionally, while vw units can be used for fluid widths that adjust to the size of the viewport. This allows your design to stay consistent and proportional, whether viewed on a mobile device or a large desktop monitor. By combining flexible units and media queries, you’ll create websites that respond beautifully to any screen size.\r\n\r\nConclusion\r\nHTML and CSS are the backbone of web development, but mastering advanced techniques can take your designs to the next level. From creating flexible layouts with Flexbox and Grid, to incorporating custom fonts and icons, to adding animations and improving semantics, these tricks can drastically enhance the functionality and visual appeal of your websites. Responsive design techniques, in particular, are crucial in today’s mobile-first world. By integrating these tips into your workflow, you’ll be able to design websites that not only look professional but also provide a seamless user experience across devices.\r\n\r\nStart incorporating these HTML and CSS tricks into your projects today, and watch your web design skills soar!', 1, 3, '2024-10-07 17:44:20'),
(4, 'The Roadmap to Becoming a Full Stack Developer', 'https://miro.medium.com/v2/resize:fit:1400/0*cl7fc6pt1MHjIF4K.png', 'Becoming a full stack developer is one of the most rewarding paths in the world of web development, offering the ability to build both the frontend and backend of an application. A full stack developer is skilled in both client-side (frontend) and server-side (backend) technologies, which means they can create fully functional applications from start to finish. This versatility makes full stack developers highly valuable in the tech industry, as they can work on every aspect of a project, from databases to user interfaces.\r\n\r\nIn this post, I’ll outline a comprehensive roadmap to becoming a full stack developer, breaking down the core skills and technologies you need to master in order to succeed. Whether you\'re just starting out or looking to expand your existing skill set, this guide will help you navigate the journey to full stack development.\r\n\r\n1. Mastering the Basics: HTML, CSS, and JavaScript\r\nThe first step in becoming a full stack developer is mastering the foundational languages of web development—HTML, CSS, and JavaScript. These three are essential for building the frontend of any website or web application.\r\n\r\nHTML (HyperText Markup Language) structures the content of your web pages. You\'ll use it to create headings, paragraphs, links, images, and other elements that form the skeleton of your site.\r\nCSS (Cascading Style Sheets) is responsible for styling your HTML elements, enabling you to add colors, fonts, layouts, and spacing to make your web pages visually appealing.\r\nJavaScript is the programming language that adds interactivity to your websites, such as creating dynamic forms, handling user events, and building interactive UI components.\r\nThese core technologies will form the foundation of your journey to becoming a full stack developer.\r\n\r\n2. Learn a Frontend Framework\r\nWhile knowing raw HTML, CSS, and JavaScript is crucial, using a frontend framework can help you build complex user interfaces more efficiently. In 2024, the most popular frontend frameworks include:\r\n\r\nReact: A widely-used JavaScript library developed by Facebook for building reusable UI components. React is ideal for single-page applications and interactive user interfaces.\r\nVue.js: Known for its simplicity and flexibility, Vue is a great framework for developers of all skill levels and is particularly beginner-friendly.\r\nAngular: A powerful framework developed by Google, Angular is commonly used in enterprise-level applications, and it provides robust tools for handling complex frontend tasks.\r\nPick one of these frameworks to dive deeper into frontend development. They will help you manage large-scale applications more efficiently.\r\n\r\n3. Backend Development: Understanding Server-Side Languages\r\nNext, you’ll need to learn backend development, which involves handling databases, server logic, and API creation. Several server-side languages and frameworks are commonly used in backend development:\r\n\r\nNode.js: A JavaScript runtime that allows you to use JavaScript for server-side programming. It’s fast and scalable, making it one of the most popular choices for full stack developers.\r\nPython with Django/Flask: Python is known for its readability and simplicity, and frameworks like Django or Flask are popular choices for backend development. Django is a more feature-rich framework, while Flask is lightweight and flexible.\r\nRuby on Rails: A full-stack framework written in Ruby, Rails is known for its \"convention over configuration\" philosophy, which speeds up the development process by reducing repetitive tasks.\r\nLearning one of these backend technologies will enable you to build robust, server-side applications and handle things like user authentication, database management, and API creation.\r\n\r\n4. Understanding Databases\r\nFull stack developers must also be proficient in working with databases. You’ll need to understand both SQL and NoSQL databases:\r\n\r\nSQL Databases (like MySQL, PostgreSQL): Used for structured data and known for their reliability and support for complex queries.\r\nNoSQL Databases (like MongoDB): Ideal for unstructured or semi-structured data, NoSQL databases are highly scalable and flexible.\r\nIn addition to understanding how to interact with databases, you’ll also need to learn how to use ORMs (Object-Relational Mappers) like Sequelize (for Node.js) or SQLAlchemy (for Python) to make database interactions easier.\r\n\r\n5. Version Control with Git and GitHub\r\nAs a full stack developer, you’ll be working on both the frontend and backend, and it’s essential to manage your code efficiently. Git is a version control system that allows you to track changes to your codebase, collaborate with other developers, and manage multiple versions of your project.\r\n\r\nPairing Git with GitHub (or GitLab/Bitbucket) allows you to store your code in the cloud, collaborate on open-source projects, and showcase your work to potential employers.\r\n\r\n6. Building and Consuming APIs\r\nA full stack developer needs to know how to build RESTful APIs to allow the frontend and backend of an application to communicate with each other. This involves sending HTTP requests, managing responses, and ensuring secure data transmission between the client and server.\r\n\r\nTools like Postman or Insomnia can help you test your APIs and ensure they work correctly. Learning to work with third-party APIs is also an essential skill, as many applications rely on external services for data.\r\n\r\n7. Deploying and Managing Servers\r\nFinally, a full stack developer needs to know how to deploy applications and manage servers. Popular cloud services like AWS, Heroku, or DigitalOcean make it easy to host your full stack applications. Understanding CI/CD (Continuous Integration/Continuous Deployment) pipelines will help you automate testing, deployment, and scaling your apps.\r\n\r\nConclusion\r\nBecoming a full stack developer is a challenging but highly rewarding journey. It requires a broad range of skills, from mastering the frontend to handling the complexities of backend development and databases. By following this roadmap and continuously learning, you’ll be well on your way to becoming a proficient full stack developer.', 1, 4, '2024-10-07 17:44:20'),
(5, 'Debugging Made Easy: My Favorite Tools and Techniques', 'https://www.guvi.in/blog/wp-content/uploads/2024/05/Image-4-2.webp', 'Debugging is an essential part of web development, yet it’s often the most challenging and time-consuming task for developers. Whether you’re troubleshooting an unexpected bug or optimizing code, effective debugging is key to maintaining a high-quality application. Over the years, I’ve learned that having the right tools and techniques can make debugging much easier and more efficient. In this post, I’ll share some of my favorite debugging tools and strategies that can help you identify and fix issues faster, saving you time and frustration.\r\n\r\n1. The Browser DevTools\r\nOne of the most powerful and versatile debugging tools at your disposal is the browser’s Developer Tools (DevTools). Available in most modern browsers like Chrome, Firefox, and Edge, DevTools allow you to inspect and debug your website’s HTML, CSS, and JavaScript in real time.\r\n\r\nElement Inspector: This lets you view and edit the HTML and CSS of your page, helping you identify and fix layout or styling issues on the spot. You can hover over elements to see their box model and make temporary changes to the styles, which is useful for testing different layouts or styles without altering your codebase.\r\n\r\nConsole: The console tab allows you to log data, view JavaScript errors, and run JavaScript code on the fly. Using console.log() is one of the simplest and most popular debugging techniques for tracking variables and function outputs.\r\n\r\nSources: The Sources tab lets you explore your site’s files and set breakpoints in your JavaScript code, pausing execution at specific lines so you can examine the state of your application at various points. You can step through your code line by line to identify logic errors.\r\n\r\nNetwork Tab: When working with APIs or AJAX requests, the Network tab is a life-saver. It tracks all HTTP requests and responses, helping you troubleshoot data-fetching issues, slow requests, or incorrect API responses.\r\n\r\nMastering browser DevTools will give you the confidence to tackle front-end bugs head-on and gain a deeper understanding of how your web pages function.\r\n\r\n2. Integrated Development Environment (IDE) Debuggers\r\nWhile DevTools are great for debugging client-side code, for backend issues, using your IDE’s built-in debugger is much more effective. Popular IDEs like Visual Studio Code, IntelliJ, or PyCharm offer advanced debugging capabilities for various programming languages.\r\n\r\nWith an IDE debugger, you can:\r\n\r\nSet breakpoints in your backend code, similar to browser DevTools, to pause the code at critical points and inspect the values of variables or state.\r\nUse step-in and step-out features to move through your code methodically and see how data flows through different functions.\r\nInspect the call stack, which helps you trace how your application got to a certain point, making it easier to identify the origin of an error.\r\nUsing an IDE debugger significantly improves your ability to identify backend errors, especially in complex applications where logging alone might not provide enough information.\r\n\r\n3. Linters and Formatters\r\nSometimes, bugs can arise from syntax errors or incorrect formatting, and that’s where linters and formatters come in handy. Linters like ESLint (for JavaScript) or Pylint (for Python) help enforce coding standards and highlight syntax errors, even before you run your code.\r\n\r\nLinters can catch:\r\n\r\nMissing semicolons or brackets\r\nUnused variables or functions\r\nIncorrect variable assignments or type mismatches\r\nPairing a linter with a formatter like Prettier ensures your code remains consistent and readable, reducing the chances of introducing errors caused by poor formatting.\r\n\r\n4. Error Monitoring Tools\r\nIn production, bugs and errors can occur that might not show up during development. That’s where error monitoring tools like Sentry, LogRocket, or New Relic come into play. These tools provide real-time monitoring of your applications, capturing errors, and offering detailed reports, including stack traces, user behavior, and environment details.\r\n\r\nSentry is a widely-used tool that automatically tracks errors and exceptions in your code and provides alerts when new issues arise. It integrates with multiple languages and frameworks, offering comprehensive insights into both frontend and backend issues.\r\n\r\nLogRocket goes a step further by recording user sessions, allowing you to see exactly how users interacted with your site before an error occurred, making it easier to reproduce and fix the bug.\r\n\r\nBy setting up error monitoring, you’ll get immediate notifications of bugs in your production environment, helping you respond to issues before they affect more users.\r\n\r\n5. Test-Driven Development (TDD)\r\nOne of the most effective debugging techniques is actually preventing bugs before they happen through Test-Driven Development (TDD). With TDD, you write tests for your code before you even write the actual implementation, ensuring that your code behaves as expected from the start.\r\n\r\nWriting unit tests and integration tests helps catch bugs early in the development process and provides a safety net when making changes to your codebase. Libraries like Jest (for JavaScript), JUnit (for Java), or pytest (for Python) make it easier to automate testing and catch errors before they reach production.\r\n\r\nConclusion\r\nDebugging is a crucial part of the development process, and having the right tools and techniques can save you time, reduce frustration, and improve the quality of your applications. From mastering browser DevTools and IDE debuggers to utilizing linters, error monitoring tools, and adopting TDD, these methods will help you become more efficient at identifying and resolving bugs. The more you practice these techniques, the more confident you’ll become in delivering reliable, bug-free code.', 1, 5, '2024-10-07 17:48:44'),
(6, 'React vs. Vue: Which Should You Learn in 2024?', 'https://www.oneclickitsolution.com/blog/wp-content/uploads/2024/01/vue-vs-react-comparison.png', 'In the world of frontend development, two of the most popular JavaScript frameworks are React and Vue. Both have their own strengths, and choosing between them can be challenging, especially for developers looking to enhance their skillset in 2024. React, backed by Facebook, has long been the dominant player in the frontend space, while Vue, known for its simplicity and flexibility, has gained a large, dedicated following. If you’re trying to decide which one to learn in 2024, this post will help you understand the key differences, benefits, and considerations of both.\r\n\r\n1. Popularity and Ecosystem\r\nReact, having been released in 2013 by Facebook, is one of the most widely-used JavaScript libraries for building user interfaces. It boasts a huge ecosystem of tools, libraries, and third-party integrations, making it the go-to choice for many large-scale projects and enterprise applications. If you’re planning to work on projects that require strong community support, scalability, and compatibility with a range of tools, React is an excellent choice.\r\n\r\nVue, while younger (released in 2014 by Evan You), has grown significantly and is favored by many developers for its simplicity and ease of integration. Vue’s ecosystem, though smaller than React’s, is still robust and rapidly growing. Vue is widely used in smaller projects, startups, and projects where rapid prototyping and ease of development are key considerations.\r\n\r\nIn 2024, React continues to dominate the market, but Vue has carved out a significant space, especially in smaller and medium-sized applications. Learning React can open doors to larger companies and enterprise-level projects, while Vue is often favored for personal projects or smaller teams.\r\n\r\n2. Learning Curve and Documentation\r\nIf you’re a beginner, Vue may be a better choice because of its gentler learning curve. Vue’s core library focuses solely on the view layer, making it easy to pick up without having to learn a lot of complex concepts right away. Its documentation is also known for being clear and beginner-friendly, providing detailed guides and examples that help new developers get up to speed quickly. Vue is often praised for its intuitive API and how it simplifies common tasks, such as state management, component-based development, and routing.\r\n\r\nReact, on the other hand, has a steeper learning curve, especially if you’re new to JavaScript frameworks. React’s component-based architecture requires an understanding of JSX (JavaScript XML), which can be confusing for beginners. Additionally, React doesn’t include everything you need out of the box. You’ll likely need to learn additional libraries for things like state management (Redux or React Context) and routing (React Router). This flexibility is great for experienced developers but can be overwhelming for those just starting out.\r\n\r\nThat said, React has extensive documentation and a huge number of tutorials, making it relatively easy to find learning resources. In 2024, if you’re up for a challenge and want to master a more complex framework, React might be the better long-term investment.\r\n\r\n3. Performance and Flexibility\r\nBoth React and Vue offer great performance when building user interfaces, but they approach flexibility differently. React’s core philosophy is “learn once, write anywhere,” meaning it can be used to build web, mobile (with React Native), and even desktop applications (with Electron). This makes React highly versatile and a great choice if you plan to build cross-platform applications.\r\n\r\nVue, while also performant, focuses more on ease of development and simplicity. It’s especially well-suited for smaller, single-page applications (SPAs) and can be easily integrated into existing projects. Vue’s flexibility comes from its progressive framework design, allowing developers to pick and choose which features to implement based on their project’s needs. However, for more complex, larger applications, React’s modularity and extensive ecosystem give it an edge.\r\n\r\n4. Job Market and Career Opportunities\r\nIn terms of career prospects, React has the upper hand in 2024. Many large companies, including Facebook, Instagram, Netflix, and Airbnb, use React in production, which means there’s a high demand for React developers in the job market. Learning React can provide more job opportunities, particularly if you want to work for bigger tech companies or agencies that handle large-scale applications.\r\n\r\nWhile Vue has a smaller job market, its demand is still growing, especially in startups, smaller companies, and freelance projects. If you’re looking to work in environments where rapid prototyping and ease of use are prioritized, Vue could be a great choice. Additionally, many companies are adopting Vue because of its simplicity and ease of integration with other libraries.\r\n\r\nConclusion\r\nChoosing between React and Vue in 2024 depends on your goals and the type of projects you want to work on. If you’re looking for versatility, long-term career opportunities, and the chance to work on large-scale applications, React is the more powerful option. However, if you’re a beginner or prefer a simpler framework for smaller projects and rapid prototyping, Vue’s simplicity and user-friendly nature make it an excellent choice.\r\n\r\nUltimately, both frameworks are valuable to learn, and mastering either will give you the skills to build modern, efficient, and scalable web applications.', 1, 6, '2024-10-07 17:48:44'),
(7, 'Understanding AI: A Beginner\'s Guide', 'https://openmetal.io/wp-content/uploads/2024/03/Beginners-Guide-To-Understanding-AI.jpg', 'Artificial Intelligence (AI) is no longer a concept confined to science fiction; it has become an integral part of our everyday lives. From virtual assistants like Siri and Alexa to recommendation systems on platforms like Netflix and Amazon, AI is reshaping how we interact with technology. For those new to the field, understanding the basics of AI can be both exciting and overwhelming. In this guide, we will break down the fundamental concepts of AI, its various types, and its real-world applications, providing a solid foundation for beginners.\r\n\r\nWhat is AI?\r\nAt its core, AI refers to the simulation of human intelligence in machines programmed to think, learn, and solve problems. The goal of AI is to create systems that can perform tasks typically requiring human intelligence, such as understanding natural language, recognizing patterns, making decisions, and even perceiving their environment.\r\n\r\nTypes of AI\r\nAI can be broadly categorized into two types: Narrow AI and General AI.\r\n\r\nNarrow AI (or Weak AI): This type of AI is designed to perform a specific task. Most of the AI applications we encounter today fall under this category. For instance, AI algorithms used in facial recognition, language translation, or even playing chess are examples of Narrow AI. These systems excel in their designated tasks but lack the ability to operate outside of their specific domain.\r\n\r\nGeneral AI (or Strong AI): This theoretical form of AI refers to machines that possess the ability to understand, learn, and apply knowledge across a wide range of tasks, much like a human. General AI remains largely a concept, with no current systems capable of this level of intelligence. Researchers are actively exploring ways to achieve General AI, but significant challenges lie ahead.\r\n\r\nHow Does AI Work?\r\nAI systems utilize various techniques to mimic human intelligence, with machine learning (ML) being one of the most prominent. Machine learning is a subset of AI that enables systems to learn from data, improving their performance over time without explicit programming.\r\n\r\nSupervised Learning: In this approach, models are trained on labeled datasets, where the desired output is provided. The model learns to make predictions based on input data, making it suitable for tasks like image classification and sentiment analysis.\r\n\r\nUnsupervised Learning: Here, the model is given unlabeled data and must identify patterns or relationships within the data. This technique is often used for clustering and anomaly detection.\r\n\r\nReinforcement Learning: This method involves training an agent to make decisions by rewarding it for correct actions and penalizing it for incorrect ones. It is commonly used in robotics and game development.\r\n\r\nReal-World Applications\r\nAI has a wide range of applications across various industries, including:\r\n\r\nHealthcare: AI is transforming patient care through predictive analytics, diagnostic tools, and personalized treatment plans. Algorithms can analyze medical images, predict disease outbreaks, and even assist in robotic surgeries.\r\n\r\nFinance: In finance, AI is used for fraud detection, risk assessment, and algorithmic trading. Machine learning models can analyze transaction patterns to identify suspicious activities and improve decision-making.\r\n\r\nTransportation: Autonomous vehicles rely on AI to navigate and make real-time decisions. AI-powered systems process data from sensors, cameras, and GPS to enhance safety and efficiency.\r\n\r\nCustomer Service: AI chatbots and virtual assistants are revolutionizing customer support by providing instant responses and assistance. These systems can handle inquiries, troubleshoot issues, and improve overall customer experience.\r\n\r\nConclusion\r\nUnderstanding AI is the first step toward harnessing its potential in our lives and careers. As technology continues to evolve, AI will play an increasingly vital role in shaping the future. Whether you’re a student, a professional, or simply an interested individual, gaining insights into AI can empower you to engage with this transformative technology more effectively. In the coming years, as AI becomes more pervasive, staying informed about its developments and implications will be crucial. Embracing the opportunities AI presents can lead to innovative solutions and a better understanding of the world around us.', 2, 7, '2024-10-07 17:53:41'),
(8, 'Top 5 AI Tools for Developers in 2024', 'https://media.licdn.com/dms/image/D5612AQF_rnywOcuawA/article-cover_image-shrink_720_1280/0/1708084940543?e=2147483647&v=beta&t=01humIrYLc0XH4SQ4W3q7rXDWA8Pstsz2zu83Vevfmo', 'As artificial intelligence continues to revolutionize various industries, developers are increasingly leveraging AI tools to enhance their productivity, streamline workflows, and build innovative applications. In 2024, several AI tools stand out for their effectiveness, ease of use, and robust features. This post will explore the top five AI tools that developers should consider integrating into their projects this year.\r\n\r\n1. GitHub Copilot\r\nGitHub Copilot is an AI-powered code completion tool developed by GitHub in collaboration with OpenAI. Leveraging advanced machine learning models, Copilot provides intelligent code suggestions and autocompletions directly within the IDE. It understands the context of the code you’re writing and offers relevant snippets, making coding more efficient and reducing the time spent on repetitive tasks.\r\n\r\nWith support for numerous programming languages, including Python, JavaScript, and Ruby, GitHub Copilot can help developers of all skill levels write code faster and with fewer errors. Its ability to suggest entire functions or even complex algorithms based on natural language prompts sets it apart, making it an essential tool for developers looking to harness AI in their daily workflows.\r\n\r\n2. TensorFlow\r\nTensorFlow, developed by Google, is one of the most popular open-source frameworks for building machine learning and deep learning models. In 2024, it remains a go-to tool for developers working on AI applications. TensorFlow provides a comprehensive ecosystem that includes powerful libraries, tools, and community support, making it easier to develop and deploy machine learning models.\r\n\r\nWith its high-level API, Keras, TensorFlow simplifies the process of building neural networks, allowing developers to focus on model architecture without getting bogged down in low-level implementation details. TensorFlow also supports deployment across various platforms, from web applications to mobile devices, making it an ideal choice for developers looking to implement AI in diverse environments.\r\n\r\n3. PyTorch\r\nAnother leading framework for machine learning and deep learning is PyTorch, which has gained popularity for its flexibility and ease of use. Developed by Facebook’s AI Research lab, PyTorch enables developers to build complex neural networks with dynamic computation graphs, making debugging and experimentation more straightforward.\r\n\r\nIn 2024, PyTorch continues to be favored for research and production due to its intuitive interface and strong community support. It is particularly popular among researchers and academics for its simplicity in prototyping and developing state-of-the-art AI models. With various tools and libraries built on top of it, such as TorchVision and Hugging Face Transformers, PyTorch is a powerful option for developers looking to create cutting-edge AI applications.\r\n\r\n4. Hugging Face\r\nHugging Face has emerged as a leader in natural language processing (NLP) with its extensive library of pre-trained models and user-friendly interface. In 2024, it offers an invaluable resource for developers working on NLP projects, providing access to thousands of models, including state-of-the-art transformer architectures like BERT and GPT.\r\n\r\nHugging Face’s Transformers library allows developers to quickly integrate powerful language models into their applications with minimal effort. Its user-friendly API and comprehensive documentation make it accessible for both beginners and experienced developers. With the growing importance of NLP in various applications, Hugging Face is a must-have tool for any developer looking to implement AI-driven language understanding.\r\n\r\n5. DataRobot\r\nDataRobot is an automated machine learning (AutoML) platform that simplifies the process of building and deploying machine learning models. In 2024, it is particularly valuable for developers and data scientists who want to streamline their workflows without deep expertise in machine learning.\r\n\r\nWith DataRobot, users can upload their datasets, and the platform will automatically preprocess the data, select appropriate algorithms, and train multiple models to find the best-performing one. This significantly reduces the time and effort required to develop machine learning solutions, making it easier for organizations to harness AI for their specific needs. DataRobot also provides insights into model performance and interpretability, empowering developers to make data-driven decisions confidently.\r\n\r\nConclusion\r\nIn 2024, these top five AI tools—GitHub Copilot, TensorFlow, PyTorch, Hugging Face, and DataRobot—offer developers a range of powerful capabilities to enhance their AI projects. By integrating these tools into their workflows, developers can streamline their processes, improve productivity, and create innovative applications that leverage the power of artificial intelligence. As the landscape of AI continues to evolve, staying updated with the latest tools and technologies will be crucial for developers looking to succeed in this dynamic field.', 2, 8, '2024-10-07 17:53:41');
INSERT INTO `posts` (`posts_id`, `title`, `image`, `description`, `categories_id`, `users_id`, `created_at`) VALUES
(9, 'AI in Education: Enhancing Learning Experiences', 'https://media.licdn.com/dms/image/D4D12AQH1b5DPVik3iw/article-cover_image-shrink_720_1280/0/1684494653433?e=2147483647&v=beta&t=v6pfylEpvryZ9VP3CHv8E37WzebsIfUJtZw1El5T8AM', 'Artificial Intelligence (AI) is rapidly transforming various sectors, and education is no exception. In recent years, educators and institutions have begun to recognize the immense potential of AI to enhance learning experiences, personalize education, and streamline administrative tasks. In 2024, AI tools and applications are increasingly integrated into classrooms, providing innovative solutions that cater to the diverse needs of students and teachers alike. This post explores how AI is revolutionizing education and what it means for the future of learning.\r\n\r\nPersonalization of Learning\r\nOne of the most significant advantages of AI in education is its ability to personalize learning experiences. Traditional classroom settings often struggle to meet the individual needs of each student, leading to gaps in understanding and engagement. AI-powered adaptive learning platforms can analyze student performance in real time, identifying strengths and weaknesses to tailor educational content accordingly.\r\n\r\nFor instance, platforms like Knewton and DreamBox Learning use algorithms to adjust the difficulty level of exercises based on a student’s progress, ensuring that they are challenged without feeling overwhelmed. This personalized approach helps students learn at their own pace, fostering a deeper understanding of the material and enhancing their overall educational experience.\r\n\r\nIntelligent Tutoring Systems\r\nAI-driven intelligent tutoring systems (ITS) provide students with additional support outside the classroom. These systems use natural language processing and machine learning to engage students in personalized one-on-one interactions, offering explanations, feedback, and resources based on their specific learning needs.\r\n\r\nFor example, platforms like Socratic and Querium leverage AI to help students work through complex problems, guiding them step by step while adapting to their learning styles. By providing immediate assistance, ITS can help students overcome challenges in real time, boosting their confidence and motivation to learn.\r\n\r\nEnhancing Teacher Efficiency\r\nAI also plays a crucial role in reducing the administrative burden on educators, allowing them to focus more on teaching and less on routine tasks. For instance, AI-powered tools can automate grading and assessment processes, freeing up valuable time for teachers to spend on lesson planning and student engagement.\r\n\r\nTools like Gradescope utilize AI to streamline the grading of assignments, providing quick and consistent feedback to students. Additionally, AI can assist in analyzing student data to identify trends and insights, enabling teachers to make informed decisions about curriculum adjustments and instructional strategies. By harnessing AI, educators can enhance their effectiveness and create more engaging learning environments.\r\n\r\nData-Driven Insights\r\nAI in education also provides valuable data-driven insights that can inform institutional decision-making. By analyzing vast amounts of student data, AI systems can identify patterns related to student performance, engagement, and retention. These insights can help schools and universities make strategic decisions to improve educational outcomes.\r\n\r\nFor example, predictive analytics can identify at-risk students who may need additional support, enabling proactive intervention strategies. This data-driven approach allows institutions to enhance student retention rates and create more effective educational programs tailored to the needs of their communities.\r\n\r\nEthical Considerations\r\nWhile the benefits of AI in education are substantial, it is essential to address the ethical considerations that arise with its implementation. Issues such as data privacy, algorithmic bias, and equitable access to AI tools must be carefully considered to ensure that all students benefit from these technologies. Educational institutions must prioritize ethical AI practices and engage stakeholders in discussions about the responsible use of AI in learning environments.\r\n\r\nConclusion\r\nIn 2024, AI is poised to play a transformative role in education, enhancing learning experiences, personalizing instruction, and streamlining administrative tasks. By leveraging AI technologies, educators can create more engaging and effective learning environments that cater to the diverse needs of students. As AI continues to evolve, it is crucial for educators, policymakers, and technology developers to collaborate in ensuring that these tools are implemented ethically and equitably, ultimately improving educational outcomes for all learners. The future of education is bright, and with AI at the forefront, we can look forward to a more personalized and effective learning experience.\r\n\r\n\r\n\r\n\r\n\r\n\r\n', 2, 9, '2024-10-07 17:56:23'),
(10, 'AI-Powered Marketing: Strategies for Success', 'https://media.licdn.com/dms/image/D5612AQHJf5J0aOmKIg/article-cover_image-shrink_720_1280/0/1711882827955?e=2147483647&v=beta&t=OXpxteTydjZ_-vr7-MIR2kicWwYCpiwUeFGN5HY2O1o', 'In today’s digital landscape, artificial intelligence (AI) is revolutionizing the way businesses approach marketing. As companies strive to engage consumers more effectively and optimize their marketing strategies, AI offers innovative tools and techniques that can enhance decision-making, improve customer interactions, and drive revenue growth. In 2024, harnessing the power of AI in marketing has become essential for organizations looking to stay competitive and responsive to consumer needs. This post explores key AI-powered marketing strategies that can lead to success.\r\n\r\n1. Personalization at Scale\r\nOne of the most significant advantages of AI in marketing is its ability to deliver personalized experiences to customers at scale. Traditional marketing approaches often rely on broad demographics and general preferences, which can result in missed opportunities for engagement. AI enables businesses to analyze vast amounts of consumer data, including browsing behavior, purchase history, and social media interactions, to create highly personalized marketing campaigns.\r\n\r\nFor instance, AI algorithms can segment audiences based on their preferences and behaviors, allowing marketers to tailor content and offers that resonate with each group. By leveraging tools like dynamic content generation and personalized email marketing, brands can increase engagement rates and improve customer satisfaction. This level of personalization not only enhances the customer experience but also fosters loyalty and drives conversions.\r\n\r\n2. Predictive Analytics for Better Decision-Making\r\nAI-powered predictive analytics enables marketers to forecast future consumer behavior based on historical data. By analyzing trends and patterns, businesses can gain valuable insights into customer preferences and market dynamics. This data-driven approach allows organizations to make informed decisions regarding product development, pricing strategies, and promotional campaigns.\r\n\r\nFor example, companies can use predictive analytics to identify which products are likely to become popular, enabling them to optimize inventory management and allocate marketing resources more effectively. Additionally, by anticipating customer needs, brands can proactively engage with consumers, ultimately improving retention rates and increasing customer lifetime value.\r\n\r\n3. Chatbots and Conversational Marketing\r\nAI-driven chatbots are transforming customer interactions by providing instant support and personalized communication. These virtual assistants can handle inquiries, provide product recommendations, and even facilitate transactions, ensuring customers receive prompt assistance 24/7. By incorporating chatbots into their marketing strategies, businesses can enhance customer service and improve user experience.\r\n\r\nConversational marketing, powered by AI, allows brands to engage with customers in real-time, creating meaningful interactions that drive engagement. Chatbots can analyze user data to deliver tailored responses, making conversations more relevant and enjoyable. By utilizing this technology, companies can build stronger relationships with customers, ultimately leading to higher satisfaction and loyalty.\r\n\r\n4. Content Creation and Optimization\r\nAI is also revolutionizing content marketing by streamlining content creation and optimization processes. AI-driven tools can analyze existing content, identify gaps, and suggest topics that resonate with target audiences. Additionally, AI algorithms can optimize content for search engines, ensuring better visibility and higher rankings.\r\n\r\nPlatforms like Jarvis and Copy.ai harness AI to assist marketers in generating high-quality content quickly. These tools can produce blog posts, social media updates, and ad copy, saving time and resources while maintaining a consistent brand voice. By leveraging AI for content creation, businesses can stay agile in their marketing efforts and deliver valuable information to their audiences.\r\n\r\n5. Enhanced Customer Insights through Sentiment Analysis\r\nAI-powered sentiment analysis tools help marketers understand customer opinions and emotions towards their brand, products, and services. By analyzing social media conversations, online reviews, and survey responses, AI can gauge public sentiment and identify areas for improvement.\r\n\r\nThis information is invaluable for crafting targeted marketing campaigns and addressing customer concerns effectively. By responding to feedback and adjusting strategies based on sentiment analysis, brands can demonstrate that they value customer input and are committed to enhancing their offerings.\r\n\r\nConclusion\r\nAs AI continues to evolve, its impact on marketing strategies will only grow. In 2024, adopting AI-powered marketing techniques is essential for businesses seeking to enhance customer experiences, optimize campaigns, and drive growth. By leveraging personalization, predictive analytics, chatbots, content optimization, and sentiment analysis, companies can create more effective and responsive marketing strategies. Embracing AI in marketing not only positions brands for success but also allows them to build lasting relationships with their customers in an increasingly competitive landscape. The future of marketing is here, and those who harness the power of AI will undoubtedly thrive.', 2, 10, '2024-10-07 17:56:23');

-- --------------------------------------------------------

--
-- Table structure for table `users`
--

CREATE TABLE `users` (
  `users_id` int(11) NOT NULL,
  `name` varchar(255) NOT NULL,
  `email` varchar(255) NOT NULL,
  `password` varchar(255) NOT NULL,
  `profile` varchar(255) NOT NULL,
  `role` varchar(255) NOT NULL,
  `created_at` timestamp NOT NULL DEFAULT current_timestamp()
) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_general_ci;

--
-- Dumping data for table `users`
--

INSERT INTO `users` (`users_id`, `name`, `email`, `password`, `profile`, `role`, `created_at`) VALUES
(1, 'Kaung Thant', 'thantkaung501@gmail.com', '123456789', 'https://api.army.mil/e2/c/images/2023/04/18/21e1ac61/size0-full.jpg', 'Admin', '2024-10-07 14:55:52'),
(2, 'Kyaw Gyi', 'kyawgyi@gmail.com', '987654321', 'https://bulgarianmilitary.com/wp-content/uploads/2020/07/Heckler-Koch-assault-rifles-as-a-part-of-US-SWAT-armament.jpg', 'Admin', '2024-10-07 14:55:52'),
(3, 'Messi', 'messi@gmail.com', '147258369', 'https://www.forcesnews.com/sites/default/files/A%20Norwegian%20soldier%20of%20the%20Telemark%20Battalion%2C%20fires%20the%20HK416%20with%20blank%20rounds%20toward%20a%20simulated%20target%20at%20Al%20Asad%20Air%20Base%2C%20Iraq%2C%20June%2013%2C%202020%20', 'Admin', '2024-10-07 17:23:12'),
(4, 'Escanor', 'escanor@gmail.com', '741852963', 'https://i.namu.wiki/i/PT2C0EWmN13AJ6RUxjTBMYltmFIq2mAuhI1cgddws9Ku5-BbPlMuw13D9CGsCXsDKQEY_16BVARy0S831YEniA.webp', 'Admin', '2024-10-07 17:23:12'),
(5, 'Arkar Myo', 'akm69@gmail.com', '1593572468', 'https://live.staticflickr.com/2931/13565630895_7223b5241c_z.jpg', 'Admin', '2024-10-07 17:23:12'),
(6, 'Hitler', 'adolfhitler456@gmail.com', '0135798642', 'https://static.wikia.nocookie.net/worldofwar-htif/images/f/fc/Navy_SEAL_HK416.jpg/revision/latest?cb=20150811151547', 'Author', '2024-10-07 17:23:12'),
(7, 'Churchill', 'winstonchurchill90@gmail.com', '456789123', 'https://foreignlegion.info/wordpress/wp-content/uploads/2017/05/13dble-hk416f-legionnaire.jpg', 'Author', '2024-10-07 17:23:12'),
(8, 'Martin Odegaard', 'odegaard08@gmail.com', '987321654', 'https://www.joint-forces.com/wp-content/uploads/2020/11/2eREP-20201118-069-46.jpg', 'Author', '2024-10-07 17:23:12'),
(9, 'Gabriel Martinelli', 'martinelli11@gmail.com', '1593578642', 'https://s.hs-data.com/bilder/spieler/gross/478042.jpg', 'Author', '2024-10-07 17:23:12'),
(10, 'Kai Havertz', 'havertz24@gmail.com', '2468135790', 'https://tribratanews.polri.go.id/web/image/blog.post/60279/image', 'Author', '2024-10-07 17:23:12');

--
-- Indexes for dumped tables
--

--
-- Indexes for table `categories`
--
ALTER TABLE `categories`
  ADD PRIMARY KEY (`categories_id`);

--
-- Indexes for table `posts`
--
ALTER TABLE `posts`
  ADD PRIMARY KEY (`posts_id`);

--
-- Indexes for table `users`
--
ALTER TABLE `users`
  ADD PRIMARY KEY (`users_id`);

--
-- AUTO_INCREMENT for dumped tables
--

--
-- AUTO_INCREMENT for table `categories`
--
ALTER TABLE `categories`
  MODIFY `categories_id` int(11) NOT NULL AUTO_INCREMENT, AUTO_INCREMENT=3;

--
-- AUTO_INCREMENT for table `posts`
--
ALTER TABLE `posts`
  MODIFY `posts_id` int(11) NOT NULL AUTO_INCREMENT, AUTO_INCREMENT=11;

--
-- AUTO_INCREMENT for table `users`
--
ALTER TABLE `users`
  MODIFY `users_id` int(11) NOT NULL AUTO_INCREMENT, AUTO_INCREMENT=11;
COMMIT;

/*!40101 SET CHARACTER_SET_CLIENT=@OLD_CHARACTER_SET_CLIENT */;
/*!40101 SET CHARACTER_SET_RESULTS=@OLD_CHARACTER_SET_RESULTS */;
/*!40101 SET COLLATION_CONNECTION=@OLD_COLLATION_CONNECTION */;
